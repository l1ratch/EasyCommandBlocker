name: Create Release

on:
  push:
    branches:
      - master

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Загружаем все коммиты и теги

      - name: Fetch all tags
        run: git fetch --tags

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          if [ -z "$VERSION" ]; then
            echo "Version not found in pom.xml"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract full commit message as description
        id: extract_description
        run: |
          DESCRIPTION=$(git log -1 --pretty=%B)
          echo "$DESCRIPTION" > description.txt
          echo "DESCRIPTION_FILE=description.txt" >> $GITHUB_ENV

      - name: Check if build is needed
        if: contains('${{ env.DESCRIPTION }}', 'no build version')
        run: |
          echo "Build and release skipped due to 'no build version' in commit message."
          exit 0

      - name: Determine the next available version with parentheses
        id: determine_version
        run: |
          BASE_TAG="v${{ env.VERSION }}"
          TAG_NAME="$BASE_TAG"
          COUNTER=1

          while gh release view "$TAG_NAME" >/dev/null 2>&1; do
            echo "Tag $TAG_NAME already exists, incrementing..."
            TAG_NAME="$BASE_TAG($COUNTER)"
            COUNTER=$((COUNTER + 1))
          done

          FINAL_VERSION="$TAG_NAME"
          echo "FINAL_VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          echo "Determined next available version: $FINAL_VERSION"

      - name: Build with Maven
        run: mvn clean package -Dproject.version=${{ env.FINAL_VERSION }}

      - name: Check if JAR file exists
        run: ls -lh target/

      - name: Rename JAR file to match version
        run: |
          JAR_FILE=$(ls target/EasyCommandBlocker-*.jar | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "JAR file not found!"
            exit 1
          fi
          mv "$JAR_FILE" "target/EasyCommandBlocker-${{ env.FINAL_VERSION }}.jar"

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Authenticate with GitHub CLI
        run: echo "${{ secrets.TOKEN }}" | gh auth login --with-token

      - name: Create GitHub Release using gh cli
        run: |
          DESCRIPTION=$(cat ${{ env.DESCRIPTION_FILE }})
          gh release create ${{ env.FINAL_VERSION }} target/EasyCommandBlocker-${{ env.FINAL_VERSION }}.jar --title "${{ env.FINAL_VERSION }}" --notes "$DESCRIPTION"
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
