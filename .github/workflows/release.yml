name: Create Release

on:
  push:
    branches:
      - master

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install GitHub CLI
        run: |
          sudo apt-get install -y gh

      - name: Get the version from pom.xml
        id: get-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "PLUGIN_VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=plugin_version::$VERSION"

      - name: Get the latest commit message
        id: get-commit-message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "::set-output name=commit_message::$COMMIT_MESSAGE"

      - name: Check if build is needed
        if: contains(steps.get-commit-message.outputs.commit_message, 'no build version')
        run: |
          echo "Build and release skipped due to 'no build version' in commit message."
          exit 0

      - name: Determine release tag with fix version
        id: determine-tag
        run: |
          TAG_NAME="v${{ steps.get-version.outputs.plugin_version }}"
          if gh release view "$TAG_NAME" &>/dev/null; then
            COUNTER=1
            while gh release view "$TAG_NAME($COUNTER)" &>/dev/null; do
              COUNTER=$((COUNTER+1))
            done
            TAG_NAME="$TAG_NAME($COUNTER)"
            echo "Tag already exists. New tag determined: $TAG_NAME"
          fi
          echo "::set-output name=release_tag::$TAG_NAME"

      - name: Build with Maven
        run: |
          mvn clean package

      - name: Rename built JAR
        run: |
          ORIGINAL_JAR=$(ls target/*.jar | head -n 1)
          mv "$ORIGINAL_JAR" "target/EasyCommandBlocker_${{ steps.determine-tag.outputs.release_tag }}.jar"

      - name: Save old files to a new OLD release
        if: steps.determine-tag.outputs.release_tag != steps.get-version.outputs.plugin_version
        run: |
          OLD_TAG="${{ steps.get-version.outputs.plugin_version }}-OLD"
          gh release create "$OLD_TAG" $(gh release view "${{ steps.get-version.outputs.plugin_version }}" --json assets --jq '.assets[].url' | xargs -n1 -I{} curl -L -o {} {})
          gh release delete "${{ steps.get-version.outputs.plugin_version }}" -y
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or Update GitHub Release using CLI
        run: |
          TAG_NAME="${{ steps.determine-tag.outputs.release_tag }}"
          JAR_FILE="target/EasyCommandBlocker_${{ steps.determine-tag.outputs.release_tag }}.jar"
          gh release create "$TAG_NAME" "$JAR_FILE" --title "$TAG_NAME" --notes "${{ steps.get-commit-message.outputs.commit_message }}"
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
