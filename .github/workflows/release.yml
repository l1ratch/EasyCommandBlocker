name: Create Release

on:
  push:
    branches:
      - master

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install GitHub CLI
        run: |
          sudo apt-get install -y gh

      - name: Get the version from pom.xml
        id: get-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "PLUGIN_VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=plugin_version::$VERSION"

      - name: Get the latest commit message
        id: get-commit-message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "::set-output name=commit_message::$COMMIT_MESSAGE"

      - name: Build with Maven
        run: |
          mvn clean package

      - name: Rename built JAR
        run: |
          ORIGINAL_JAR=$(ls target/*.jar | head -n 1)
          mv "$ORIGINAL_JAR" "target/EasyCommandBlocker_${{ steps.get-version.outputs.plugin_version }}.jar"

      - name: Update GitHub Release using CLI
        run: |
          TAG_NAME="v${{ steps.get-version.outputs.plugin_version }}"
          if gh release view "$TAG_NAME" &>/dev/null; then
            gh release edit "$TAG_NAME" --notes "${{ steps.get-commit-message.outputs.commit_message }}" --title "$TAG_NAME" "target/EasyCommandBlocker_${{ steps.get-version.outputs.plugin_version }}.jar"
          else
            gh release create "$TAG_NAME" "target/EasyCommandBlocker_${{ steps.get-version.outputs.plugin_version }}.jar" --title "$TAG_NAME" --notes "${{ steps.get-commit-message.outputs.commit_message }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
