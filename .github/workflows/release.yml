name: Create Release

on:
  push:
    branches:
      - master

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Get the version from pom.xml
        id: get-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "PLUGIN_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Get the latest commit message
        id: get-commit-message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Check if build is needed
        if: contains(steps.get-commit-message.outputs.COMMIT_MESSAGE, 'no build version')
        run: |
          echo "Build and release skipped due to 'no build version' in commit message."
          exit 0

      - name: Check if tag exists and determine new tag
        id: check-tag
        run: |
          TAG_NAME=v${{ env.PLUGIN_VERSION }}
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            COUNTER=1
            while git rev-parse "$TAG_NAME-$COUNTER" >/dev/null 2>&1; do
              COUNTER=$((COUNTER+1))
            done
            TAG_NAME="$TAG_NAME-$COUNTER"
          fi
          echo "RELEASE_TAG=$TAG_NAME" >> $GITHUB_ENV

      - name: Build with Maven
        run: |
          mvn clean package

      - name: Rename built JAR
        run: |
          ORIGINAL_JAR=$(ls target/*.jar | head -n 1)
          if [ -f "target/EasyCommandBlocker_${{ env.RELEASE_TAG }}.jar" ]; then
            rm "target/EasyCommandBlocker_${{ env.RELEASE_TAG }}.jar"
          fi
          mv "$ORIGINAL_JAR" "target/EasyCommandBlocker_${{ env.RELEASE_TAG }}.jar"

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: ${{ env.RELEASE_TAG }}
          body: ${{ env.COMMIT_MESSAGE }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      - name: Upload JAR to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: "target/EasyCommandBlocker_${{ env.RELEASE_TAG }}.jar"
          asset_name: "EasyCommandBlocker_${{ env.RELEASE_TAG }}.jar"
          asset_content_type: application/java-archive
